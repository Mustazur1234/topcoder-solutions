#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <bits/stdc++.h>
using namespace std;

class IntegerSequence {
public:
	int maxSubsequence(vector <int>);
};
int lis1[100];
int lis2[100];
int IntegerSequence::maxSubsequence(vector <int> numbers) {

int n=numbers.size();
// find the length of longest increasing subsequence ending at index i and length of longest decresing starting from index i
memset(lis1,0,sizeof(lis1));
memset(lis2,0,sizeof(lis2));
for(int i=0;i<n;i++){
	for(int j=0;j<i;j++){
		if(numbers[i]>numbers[j]){
			lis1[i]=max(lis1[j]+1,lis1[i]);
		}
	}
}
for(int i=n-1;i>=0;i--){
	for(int j=n-1;j>i;j--){
		if(numbers[j]<numbers[i]){
			lis2[i]=max(lis2[j]+1,lis2[i]);
		}
	}
}
int maxii=-100;
for(int i=0;i<n;i++){
	maxii=max(maxii,lis1[i]+lis2[i]);
}
return n-maxii-1;

}

//<%:testing-code%>
//Powered by [KawigiEdit] 2.0!
//<%:start-tests%>
double test0() {
	int t0[] = {1, 4, 6, 5, 2, 1};
	vector <int> p0(t0, t0+sizeof(t0)/sizeof(int));
	IntegerSequence * obj = new IntegerSequence();
	clock_t start = clock();
	int my_answer = obj->maxSubsequence(p0);
	clock_t end = clock();
	delete obj;
	cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
	int p1 = 0;
	cout <<"Desired answer: " <<endl;
	cout <<"\t" << p1 <<endl;
	cout <<"Your answer: " <<endl;
	cout <<"\t" << my_answer <<endl;
	if (p1 != my_answer) {
		cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
		return -1;
	}
	else {
		cout <<"Match :-)" <<endl <<endl;
		return (double)(end-start)/CLOCKS_PER_SEC;
	}
}
double test1() {
	int t0[] = {1, 2, 1, 2, 3, 2, 1, 2, 1};
	vector <int> p0(t0, t0+sizeof(t0)/sizeof(int));
	IntegerSequence * obj = new IntegerSequence();
	clock_t start = clock();
	int my_answer = obj->maxSubsequence(p0);
	clock_t end = clock();
	delete obj;
	cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
	int p1 = 4;
	cout <<"Desired answer: " <<endl;
	cout <<"\t" << p1 <<endl;
	cout <<"Your answer: " <<endl;
	cout <<"\t" << my_answer <<endl;
	if (p1 != my_answer) {
		cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
		return -1;
	}
	else {
		cout <<"Match :-)" <<endl <<endl;
		return (double)(end-start)/CLOCKS_PER_SEC;
	}
}
double test2() {
	int t0[] = {2, 2, 2, 2, 2};
	vector <int> p0(t0, t0+sizeof(t0)/sizeof(int));
	IntegerSequence * obj = new IntegerSequence();
	clock_t start = clock();
	int my_answer = obj->maxSubsequence(p0);
	clock_t end = clock();
	delete obj;
	cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
	int p1 = 4;
	cout <<"Desired answer: " <<endl;
	cout <<"\t" << p1 <<endl;
	cout <<"Your answer: " <<endl;
	cout <<"\t" << my_answer <<endl;
	if (p1 != my_answer) {
		cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
		return -1;
	}
	else {
		cout <<"Match :-)" <<endl <<endl;
		return (double)(end-start)/CLOCKS_PER_SEC;
	}
}
double test3() {
	int t0[] = {4,5,65,34,786,45678,987,543,2,6,98,580,4326,754,54,2,1,3,5,6,8,765,43,3,54};
	vector <int> p0(t0, t0+sizeof(t0)/sizeof(int));
	IntegerSequence * obj = new IntegerSequence();
	clock_t start = clock();
	int my_answer = obj->maxSubsequence(p0);
	clock_t end = clock();
	delete obj;
	cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
	int p1 = 14;
	cout <<"Desired answer: " <<endl;
	cout <<"\t" << p1 <<endl;
	cout <<"Your answer: " <<endl;
	cout <<"\t" << my_answer <<endl;
	if (p1 != my_answer) {
		cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
		return -1;
	}
	else {
		cout <<"Match :-)" <<endl <<endl;
		return (double)(end-start)/CLOCKS_PER_SEC;
	}
}
//<%:end-tests%>
int main() {
	int time;
	bool errors = false;
	
	time = test0();
	if (time < 0)
		errors = true;
	
	time = test1();
	if (time < 0)
		errors = true;
	
	time = test2();
	if (time < 0)
		errors = true;
	
	time = test3();
	if (time < 0)
		errors = true;
	
	if (!errors)
		cout <<"You're a stud (at least on the example cases)!" <<endl;
	else
		cout <<"Some of the test cases had errors." <<endl;
}
